// tcp server (simple chat app)
// command line arguments:
// filename portno
// argv[0] -> filename
// argv[1] -> portno

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>

void error(const char *msg)
{
    perror(msg);
    exit(1);
}

int main(int argc, char *argv[])
{
    if (argc < 2)
    {
        fprintf(stderr, "Port number not provided!\n");
        exit(1);
    }
    
    int sockfd, newsockfd, portno, n;
    char buffer[255];
    
    struct sockaddr_in serv_addr, cli_addr;
    socklen_t clilen;
    
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    
    if (sockfd < 0)
        error("Error opening the socket!");
    
    bzero((char *)&serv_addr, sizeof(serv_addr));
    portno = atoi(argv[1]);
    
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_addr.s_addr = INADDR_ANY;
    serv_addr.sin_port - htons(portno);
    
    if (bind(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0)
        error("Binding failed!\n");
    
    listen(sockfd, 5);
    
    clilen = sizeof(cli_addr);
    
    // after connection, use newsockfd
    newsockfd = accept(sockfd, (struct sockaddr *)&cli_addr, &clilen);
    
    if (newsockfd < 0)
        error("Error accepting connection");
    
    while(1)
    {
        bzero(buffer, 255);
        n = read(newsockfd, buffer, 255);
        if (n < 0)
            error("Error on reading!\n");
        printf("Client: %s\n", buffer);
        bzero(buffer, 255);
        
        fgets(buffer, 255, stdin);
        
        n = write(newsockfd, buffer, strlen(buffer));
        if (n < 0)
            error("Error on writing!\n");
        
        // termination condition on "Bye"
        int i = strncmp("Bye", buffer, 3);
        
        if (i == 0)
            break;
    }
    
    close(newsockfd);
    close(sockfd)
    
    return 0;
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------


// tcp client (simple chat app)
// command line arguments:
// filename server_ipaddress portno
// argv[0] -> filename
// argv[1] -> server_ipaddress
// argv[2] -> portno

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>

#include <netdb.h> // for the structure hostent

void error(const char *msg)
{
    perror(msg);
    exit(1);
}

int main(int argc, char *argv[])
{
    int sockdfd, portno, n;
    
    struct sockaddr_in serv_addr;
    struct hostent *server; // used to store given information about a host
    
    char buffer[255];
    
    if (agrc < 3)
    {
        fprintf(stderr, "usage %s hostname port\n", argv[0]);
        exit(1);
    }
    
    portno = atoi(argv[2]);
    
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    
    if (sockfd < 0)
        error("Error opening socket!\n");
    
    server = gethostbyname(argv[1]); // get host server by its ipaddress
    
    if (server == NULL)]
    {
        fprintf(stderr, "Error, no such host!\n");
        exit(1);
    }
    
    bzero((char *)&serv_addr, sizeof(serv_addr));
    
    serv_addr.sin_family = AF_INET;
    bcopy((char *)server->h_addr, (char *)&serv_addr.sin_addr.s_addr, server->h_length);
    serv_addr.sin_port = htons(portno);
    
    if (connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0)
        error("Connection to server failed!\n");
    
    while(1)
    {
        bzero(buffer, 255);
        fgets(buffer, 255, stdin);
        n = write(sockfd, buffer, strlen(buffer));
        
        if (n < 0)
            error("Error writing!\n");
        
        bzero(buffer, 255);
        
        n = read(sockfd, buffer, 255);
        
        if (n < 0)
            error("Error reading!\n");
            
        printf("Server: %s\n", buffer);
        
        // termination condition for "Bye"
        int i = strncmp("Bye", buffer, 3);
        if (i == 0)
            break;
    }
    
    close(sockfd);
    
    return 0;
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------